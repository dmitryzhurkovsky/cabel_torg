version: '3.9'

services:
  #  Backend part
  db:
    container_name: 'prod_db'
    image: postgres:15.1
    env_file:
      - backend/.env.dev
    ports:
      - '5434:5432'
    volumes:
      - ./data/postgres:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10

  parser:
    container_name: 'prod_parser'
    build:
      context: backend
      dockerfile: ./build/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/backend

  backend:
    container_name: 'prod_backend'
    build:
      context: backend
      dockerfile: ./build/Dockerfile
    ports:
      - '8000:8000'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./data/site_media:/site_media
      - ./backend:/backend

  redis:
    container_name: 'prod_redis'
    image: redis:latest
    ports:
      - '6379:6379'

  #  Frontend part
  admin_dashboard:
    container_name: 'prod_admin_dashboard'
    build:
      context: admin
      dockerfile: ./build/Dockerfile
    restart: unless-stopped
    ports:
      - '8001:8001'

  frontend:
    container_name: 'prod_frontend'
    build:
      context: ssr
      dockerfile: ./build/Dockerfile
    restart: unless-stopped
    ports:
      - '8002:8002'

  reverse_proxy: # Copy static files during building this container
    container_name: 'prod_reverse_proxy'
    build:
      context: .
      dockerfile: ./reverse_proxy/Dockerfile
    restart: always
    ports:
      - '80:80'
      - '443:443'  # for https
      - '8010:8010'  # for images and static files
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
      admin_dashboard:
        condition: service_started
    volumes:
      - ./data/site_media:/usr/share/nginx/site_media/
      - ./data/nginx:/etc/nginx/conf.d/
      - ./data/certbot/www:/var/www/certbot  # certbot
      - ./data/certbot/conf:/etc/letsencrypt  # certbot

  certbot:
    container_name: 'prod_certbot'
    image: certbot/certbot:latest
    # To make sure our certificate is renewed when itâ€™s about to expire.
    # This will check if your certificate is up for renewal every 12 hours
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    # To make sure that nginx reloads the newly obtained certificates. This makes nginx reload its configuration
    # (and certificates) every six hours in the background and launches nginx in the foreground.
    command: certonly --webroot -w /var/www/certbot --force-renewal --email dmitryzhurkovsky@gmail.com -d cabel-torg-test-domain.net.by --agree-tos
    depends_on:
      reverse_proxy:
        condition: service_started
    volumes:
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot/conf:/etc/letsencrypt
